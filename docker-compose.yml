version: '3.9'

services:
  postgres-server:
    image: 'postgres:alpine'
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders_db
    ports:
      - "5423:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis-server:
    image: redis:latest
    container_name: redis_container
    restart: always
    ports:
      - "6380:6379"
    command: ["redis-server", "--requirepass", "my_password"]
    networks:
      - app_network

  order-service:
    image: bruslanb/app-order-service-image:1.3.0
    container_name: order_service_container
    user: '1001:1001'
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/orders_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_REDIS_HOST: redis-server
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: my_password
    ports:
      - "8080:8080"
    depends_on:
      postgres-server:
        condition: service_healthy
      redis-server:
        condition: service_started
    volumes:
      - ./logs:/app/logs
    networks:
      - app_network

volumes:
  logs:
    driver: local

networks:
  app_network:
    driver: bridge
