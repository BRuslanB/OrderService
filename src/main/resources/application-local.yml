server:
  port: 8080  # Порт, на котором запускается приложение

spring:
  application:
    name: order-service
  datasource:
#   url: jdbc:postgresql://localhost:5423/orders_db       # Подключаемся к localhost:5423, так как PostgreSQL работает в контейнере
    url: jdbc:postgresql://localhost:5432/orders_db       # Подключаемся к localhost:5432, так как PostgreSQL работает локально
    username: postgres                                    # Имя пользователя базы данных
    password: postgres                                    # Пароль базы данных
    driver-class-name: org.postgresql.Driver              # Драйвер для PostgreSQL
  jpa:
    hibernate:
      ddl-auto: update            # Автоматическое создание/обновление схемы
    show-sql: true                # Показывать SQL-запросы в консоли
    properties:
      hibernate.format_sql: true  # Форматирование SQL-запросов
  cache:
    type: simple  # Использование встроенного кэширования
  security:
    user:
      password: secret      # Пароль для встроенного пользователя Spring Security (для тестирования)
  redis:
    host: localhost         # Подключаемся к localhost, так как Redis работает в контейнере
    port: 6380              # Подключаемся к внешнему порту
    password: my_password   # Пароль, указанный в Docker Compose
    timeout: 5000

jwt:
  secret: "my-very-secret-with-sufficient-length-for-hmac"    # Секретный ключ для подписи JWT
  expiration: 3600000                                         # Время жизни токена в миллисекундах (1 час)

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics  # Метрики, доступные через Actuator
  health:
    db:
      enabled: true                     # Проверка состояния базы данных
  metrics:
    export:
      enabled: true                     # Включение экспорта метрик
